{% extends [getParameter('layout')|default(''), '@DakataaCrudTwig/layout/default/auto.html.twig'] %}
{% use '@DakataaCrudTwig/components.html.twig' %}
{% block title %}{{ (title ?? 'List')|trans }}{% endblock %}
{% macro displayFormFieldValue(formField) %}
    {% if formField.vars.choices is defined %}
        {% set values = formField.vars.value is iterable ? formField.vars.value : [formField.vars.value] %}
        {% set labels = formField.vars.choices|filter(c => c.value in values)|map(v => v.label) %}
        {{ labels|join(',') }}
    {% elseif(formField.vars.checked is defined) %}
        Checked
    {% else %}
        {{ formField.vars.data }}
    {% endif %}
{% endmacro %}
{% macro filterList(form) %}
    {% for formField in form.children|filter(formField => formField.vars.data) %}
        {% if formField.children|length %}
            {{ _self.filterList(formField) }}
        {% else %}
            <div class="filters-item d-flex text-nowrap flex-column me-2 mb-2">
                {% set filterVars = form.vars.data|default([])|filter((fv,fk) => fk != formField.vars.name and fv is not empty) %}

                <small class="mb-2">{{ (formField.vars.label ?? formField.vars.name)|capitalize|trans }}</small>
                <div class="btn btn-sm btn-primary me-1 mb-1">
                    {{ _self.displayFormFieldValue(formField) }}
                    <a href="{{ generatePath('list', { filter: filterVars }) }}" class="text-white">
                        &times;
                    </a>
                </div>
            </div>
        {% endif %}
    {% endfor %}
{% endmacro %}

{% set hasFilters = form.filter.view.vars.data|default([])|filter(v => v)|length %}
{% set identifierField = entity.primaryColumn %}
{% block body %}
    <section class="list">
        <header class="content-header d-md-flex mb-3 justify-content-between align-items-center">
            <h2>
                {% block body_title %}
                    {{ block('title') }}
                {% endblock %}
            </h2>

            {% block body_navigation %}
                <div class="d-flex align-items-center">
                    <div class="btn-group btn-group-sm me-2">
                        {% for action in action|filter(a => false == a.object) %}
                            <a href="{{ generatePathByAction(action) }}" class="btn btn-outline-secondary">
                                {{ action.title|trans }}
                            </a>
                        {% endfor %}
                    </div>

                    {% if form.filter %}
                        <div class="btn-group btn-group-sm">
                            <div class="dropdown {% if hasFilters %}btn-group{% endif %}">
                                <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle"
                                        data-bs-toggle="dropdown" data-bs-auto-close="outside">
                                    {{ 'Filter'|trans }}
                                </button>
                                <div class="dropdown-menu dropdown-menu-right">
                                    <div class="filter">
                                        {{ form_start(form.filter.view, { attr: {'novalidate': 'novalidate'}}) }}
                                        {{ form_rest(form.filter.view) }}
                                        <div class="mb-3">
                                            <button type="submit"
                                                    class="btn btn-success me-2">{{ 'Search'|trans }}</button>
                                            {% if hasFilters %}
                                                <a class="btn btn-default"
                                                   href="{{ generatePath('list', { filter: '' }) }}">{{ 'Reset'|trans }}</a>
                                            {% endif %}
                                        </div>
                                        {{ form_end(form.filter.view) }}
                                    </div>
                                </div>
                            </div>
                            {% if hasFilters %}
                                <a href="{{ generatePath('list', { filter: '' }) }}" class="btn btn-outline-dark">x</a>
                            {% endif %}
                        </div>
                    {% endif %}
                </div>
            {% endblock %}
        </header>

        {% block form_start %}
            {{ form_start(form.batch.view, { attr: {novalidate: 'novalidate', autocomplete:'off'}}) }}
        {% endblock %}

        {% if hasFilters %}
            <div class="filters d-flex mb-sm overflow-auto">
                {{ _self.filterList(form.filter.view) }}
            </div>
        {% endif %}

        {{ block('ListView') }}

        <div class="actions d-flex flex-row flex-wrap align-items-center mb-3">
            {% if form.batch.view.method is defined %}
                <div class="btn-group me-2 mb-2">
                    <div class="input-group flex-nowrap">
                        {{ form_widget(form.batch.view.method, {attr: {class: 'form-control'}}) }}
                        <button type="submit" class="btn btn-outline-secondary">{{ 'Go'|trans }}</button>
                    </div>
                </div>
            {% endif %}
            <select id="results-limit" class="form-select w-auto mb-2 ms-auto">
                <option value="20">20</option>
                <option value="40">40</option>
                <option value="60">60</option>
                <option value="80">80</option>
                <option value="100">100</option>
            </select>
        </div>

        <div class="d-flex justify-content-center">
            {% include '@DakataaCrudTwig/paginator.html.twig' with { data: entity.data, route: 'list'} %}
        </div>
        {% block form_end %}
            {{ form_end(form.batch.view, {'render_rest': false}) }}
        {% endblock %}
    </section>
    <script type="text/javascript">
		let resultsLimit = document.querySelector('#results-limit');
		resultsLimit.value = {{ entity.data.meta.maxResults }};
		resultsLimit.addEventListener('change', function () {
			let url = new URL(document.location.href);
			url.searchParams.set('limit', resultsLimit.value);
			document.location = url;
		});
    </script>
{% endblock %}
